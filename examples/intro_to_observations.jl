# # Intro to observations
#
# This example demonstrates the features of `OneDimensionalTimeSeries`
# when constructed from  "synthetic observations" generated by an Oceananigans `Simulation`.
#
# ## Install dependencies
#
# First let's make sure we have all required packages installed.

# ```julia
# using Pkg
# pkg"add OceanTurbulenceParameterEstimation, Oceananigans, CairoMakie"
# ```

# First we load few things
pushfirst!(LOAD_PATH, joinpath(@__DIR__, ".."))

using OceanTurbulenceParameterEstimation
using Oceananigans
using Oceananigans.Units
using Oceananigans.TurbulenceClosures: ConvectiveAdjustmentVerticalDiffusivity

# # Generating synthetic observations
#
# We define a utility function for constructing synthetic observations,

function generate_free_convection_synthetic_observations(force=false; Nz=32, Lz=64, Qᵇ=1e-8, Qᵘ=-1e-5, Δt=10.0)
    data_name = "convective_adjustment"
    data_path = data_name * ".jld2"

    if isfile(data_path) && !force # Don't generate observations
        return data_path
    end

    # "True" parameters to be estimated by calibration
    convective_κz = 1.0
    convective_νz = 0.9
    background_κz = 1e-4
    background_νz = 1e-5

    grid = RegularRectilinearGrid(size=32, z=(-64, 0), topology=(Flat, Flat, Bounded))
    closure = ConvectiveAdjustmentVerticalDiffusivity(; convective_κz, background_κz, convective_νz, background_νz)
    u_bcs = FieldBoundaryConditions(top = FluxBoundaryCondition(Qᵘ))
    b_bcs = FieldBoundaryConditions(top = FluxBoundaryCondition(Qᵇ), bottom = GradientBoundaryCondition(N²))

    model = HydrostaticFreeSurfaceModel(grid = grid,
                                        tracers = :b,
                                        buoyancy = BuoyancyTracer(),
                                        boundary_conditions = (; u=u_bcs, b=b_bcs),
                                        coriolis = FPlane(f=1e-4),
                                        closure = closure)
                                        
    set!(model, b = (x, y, z) -> 1e-6 * z)
    
    simulation = Simulation(model; Δt, stop_time=10hours)

    init_with_parameters(file) = file["parameters"] = (; Qᵇ, Qᵘ, Δt)
    
    simulation.output_writers[:fields] = JLD2OutputWriter(model, merge(model.velocities, model.tracers),
                                                          schedule = TimeInterval(1hour),
                                                          prefix = experiment_name,
                                                          array_type = Array{Float64},
                                                          field_slicer = nothing,
                                                          init = init_with_parameters,
                                                          force = true)
    
    run!(simulation)

    return data_path
end

# and invoke it:

data_path = generate_free_convection_synthetic_observations()

# # Loading observations
#
# When synthetic observations are constructed from simulation data, we
# can select
#
# * The fields to include via `field_names`
#
# * Which data in the time-series to include via the `times` keyword.
#   This can be used to change the initial condition for a calibration run.
#
# ## Loading observations with a single field:

observations = OneDimensionalTimeSeries(data_path, field_names=:b, normalize=ZScore)

# ## Loading observations with two fields:

observations = OneDimensionalTimeSeries(data_path, field_names=(:u, :b), normalize=ZScore)

# ## Loading observations with specified times

times = observations.times[2:end]
observations = OneDimensionalTimeSeries(data_path, field_names=(:u, :b), normalize=ZScore, times=times)

